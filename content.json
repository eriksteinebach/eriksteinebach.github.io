{"meta":{"title":"Erik Steinebach","subtitle":"Full stack .NET Developer and Architect","description":null,"author":"Erik Steinebach","url":"http://eriksteinebach.nl"},"pages":[{"title":"About","date":"2016-05-14T18:25:25.000Z","updated":"2016-05-14T18:27:41.522Z","comments":true,"path":"about/index.html","permalink":"http://eriksteinebach.nl/about/index.html","excerpt":"","keywords":null,"text":"Are you looking for an experienced professional developer and/or architect to help you develop your .NET website or app? Or are you looking for a coach or lead developer to help your team to get organized and/or develop new skills? Does your team need guidance implementing DevOps or improving their development process in Team Foundation Server? Then I might be the person you are looking for. I will work with you to create your website or app, using proven Agile techniques, so you will be in control of the result at every step of the way. I will use my 7+ years of experience working as a consultant at different companies in the Dutch Healthcare system to deliver your wishes, on time and as a high quality product. A product that is developed based on the requirements, is stable, secure, tested, documented, ready to be deployed and expandable in the future.As a developer I have experience in developing full stack applications .NET (C#), ASP.NET (MVC or Winforms), WCF/WebAPI, LINQ using Microsoft SQL Server or Azure storage solutions. Even though my strengths are on the backend, optimizing performance and designing maintainable code, I can develop Javascript (for example with JQuery) and can implement a responsive design without any problem. As an architect I designed complex, fast and secure multi-tier systems, using patterns like SOA (Service-oriented Architecture), CQRS (Command Query Responsibility Segregation) and EDA (Event-driven architecture). These systems have been deployed in private infrastructures or in the (Azure) cloud. As a consultant I helped streamline and professionalize development processes by introducing Agile, Scrum, Continuous delivery and/or DevOps. For example, by fully utilizing Team Foundation Server or tools like Octopus Deploy. I am a Dutch citizen, currently based in Lima, Peru. Most work will be remote, but anyone in Lima I can meet or work for on location. I speak basic Spanish, but work related discussions will (for now) need to be in English or Dutch. I have no problem flying out to you if this is required for a project. Feel free to contact me to discuss if I can help you with your specific needs.","raw":null,"content":null}],"posts":[{"title":"The difference between implementing DevOps in small and big teams","slug":"the-difference-between-implementing-devops-in-small-and-big-teams","date":"2014-11-23T18:50:30.000Z","updated":"2016-05-14T20:07:05.327Z","comments":true,"path":"2014/11/23/the-difference-between-implementing-devops-in-small-and-big-teams/","link":"","permalink":"http://eriksteinebach.nl/2014/11/23/the-difference-between-implementing-devops-in-small-and-big-teams/","excerpt":"","keywords":null,"text":"Jeff Knupp wrote about “How DevOps is killing the developer“. I wanted to respond to this blog post, because you hear this view more often. But I think it stems from a misunderstanding about how DevOps is implemented in different size teams. Thats why I wanted to write about how DevOps should be implemented differently in small and big teams. But lets say first and foremost, DevOps will never kill the developer. How much Dev and Ops responsibilities are performed by the same person depends on the size and maturity of the company, but developers will always exist. The goal of a company should be to get software into production in an efficient manner. This is where DevOps can help. The way to do this is by optimizing the development and operations processes by seeing them as one process instead of two different processes. Achieving this goal can be done in different ways and in my opinion this results in different solutions for different size teams. Small teamsThe DevOps terms stems from startups. DevOps practices are relatively easily incorporated in startups because of their flexible nature, their relatively small teams and the DevOps practices probably aren’t far from the way they were already working. In smaller teams Dev and Ops responsibilities are already assigned to the same person which gives him/her the opportunity to optimize the full process. Most of the time smaller teams (or single programmers) were already doing DevOps without knowing the term. Introducing DevOps might improve on that process and gives them a job title which more resembles their day-to-day work. In companies like this there might not be a “developer” as such anymore. But this will hopefully change when the company grows, and teams get bigger. Bigger teamsWhen DevOps is practiced in bigger teams, DevOps works differently. Instead of sharing different parts of the job, DevOps is much more about communicating what you are doing and understanding what the other guy/girl is doing. And if you know what everybody is doing, it becomes possible to optimize the full process (the end goal). When I look at developers and operators skills, I think of a T shape. The horizontal line stands for their broad knowledge on multiple subjects. The vertical line stands for specialization in their main specialism. For everyone the T will have a different shape. The horizontal and vertical lines will be different lengths for different people. Some people will specialize is a subject, but might not have a very broad view about other subjects (specialists). Some people have a broad view (know a little about everything), but it you go a little deeper into a subject, they are lost (the high level view). If someone focuses more on the vertical or horizontal line depends on your character. A healthy team should have a mix of different people. Implementing DevOps means expending the horizontal line of the T shape for some people. It means that developers need to know more about operations. And that operators need to know more about development. But it doesn’t mean that the developer will do the operators work or the other way around. The members of the team will still have their own specialism (the vertical line) and work inside that specialism. We just try to give them a broader view. For some people this goes against character (they like to focus on their main skill) and this can cause friction and resistance. How do we give people this broader view? Most effective is improving communication between people. An effective way is combining the operations team and the development team. The close proximity results in closer/better communication (if we do it right, but lets assume we did) and it gives the team the freedom to make the necessary changes, because all the stakeholders are represented in the team. The team becomes responsible for the full process and can optimize it. Note that I didn’t say here that one person is responsible. The team with stakeholders from the different disciplines must agree on the optimized process, but all the specialists will focus on implementing their part of the puzzle. Although the way of implementing DevOps might be different, the result should be the same. The result should be an more efficient way of releasing software. This doesn’t mean that the developer “will be killed”, but DevOps makes sure they do a better job, be more efficient and have a clearer understanding of their environment. DevOps makes a developer more professional.","raw":null,"content":null,"categories":[{"name":"DevOps","slug":"DevOps","permalink":"http://eriksteinebach.nl/categories/DevOps/"}],"tags":[{"name":"Continuous Delivery","slug":"Continuous-Delivery","permalink":"http://eriksteinebach.nl/tags/Continuous-Delivery/"},{"name":"DevOps","slug":"DevOps","permalink":"http://eriksteinebach.nl/tags/DevOps/"},{"name":"Response","slug":"Response","permalink":"http://eriksteinebach.nl/tags/Response/"}]},{"title":"Introducing Continuous Delivery and DevOps in a company","slug":"introducing-continuous-delivery-and-devops-in-a-company","date":"2014-08-23T18:49:17.000Z","updated":"2016-05-14T20:10:15.751Z","comments":true,"path":"2014/08/23/introducing-continuous-delivery-and-devops-in-a-company/","link":"","permalink":"http://eriksteinebach.nl/2014/08/23/introducing-continuous-delivery-and-devops-in-a-company/","excerpt":"","keywords":null,"text":"Introducing Continuous Delivery or DevOps should never be a goal in itself, only the means to reach another goal. The definition of the goal depends on the origin for the wish. This could for example be the wish for a smoother deployment process, which would be mainly driven by IT management. Or the reduction of downtime during deployment, mainly driven by business demands (expectation of customers). Continuous Delivery and DevOps can help achieving both of these goals. When a company is looking to introduce Continuous Delivery and/or DevOps it is important to look at the development and deployment processes used inside the company and the organization of different divisions inside the company. Continuous delivery focuses mostly on the deployment pipeline, the tools. DevOps focuses more on the organization of the company. One important aspect is looking at responsibility. Who is responsible when something goes wrong? Less important is who is theoretically responsible, but who is really responsible, so who gets the call when a system goes down at 2AM? Who has to deal with the fallout when something breaks? Here you will find the smells that show where the problems are inside a company and where DevOps could create a better culture. Another aspect is looking at how software gets deployed in production. Part of introducing CD is automating the deployment process. The level of automation will depend on the investment that the company is willing to make. Currently the tooling available is not yet at such a level that facebook or google style “unnoticed” deployment is easily possible. I do expect this to get better in the future (look at Microsoft’s Azure for example), but there will always be an extra cost to doing CD. Think for example about higher complexity in database design. Companies will have to decide the investment they are willing to make and where they see the most benefit. For some companies a Facebook of Google style deployment will not make business sense. Lets look a company developing B2B applications for Dutch clients and their need for CD. They may still want rapid deployment (for example every week) to support there Agile development process. But their application is only used during business hours. After business hours there is sometimes an occasional user (someone working late or forgot something and does it from home), but 99% of the activity is during the day. How much will an investment in live updating of the application be worth? If we can do the deployment in 15 minutes and do it always outside of business hours? That would probably be good enough, right? It is important to realize though, that there are always some side scenario’s to consider. Think for example in the above scenario about this nasty bug you found that needs to be fixed immediately. Your patch process is (if you follow CD) the same as your normal deployment process. So now we have to bring our application down during business hours. This is probably not different than before implementing CD, but these gotcha’s have to be clear for management. A cost-benefit evaluation should have been made with every scenario in mind and agreed upon by IT &amp; business management. Only than can be decided how much the introduction of Continuous Delivery and DevOps inside a company may cost. In future posts I will go into more detail about parts mentioned in this blog post.","raw":null,"content":null,"categories":[{"name":"DevOps","slug":"DevOps","permalink":"http://eriksteinebach.nl/categories/DevOps/"}],"tags":[{"name":"Continuous Delivery","slug":"Continuous-Delivery","permalink":"http://eriksteinebach.nl/tags/Continuous-Delivery/"},{"name":"DevOps","slug":"DevOps","permalink":"http://eriksteinebach.nl/tags/DevOps/"}]},{"title":"How to explain Continuous Delivery to backpackers","slug":"how-to-explain-continuous-delivery-to-backpackers","date":"2014-08-06T18:47:44.000Z","updated":"2016-05-14T19:55:13.762Z","comments":true,"path":"2014/08/06/how-to-explain-continuous-delivery-to-backpackers/","link":"","permalink":"http://eriksteinebach.nl/2014/08/06/how-to-explain-continuous-delivery-to-backpackers/","excerpt":"","keywords":null,"text":"The last months I have been traveling Southeast Asia as a backpacker. During my travels I met a lot of other travelers. The conversations I have with them, tend to all start in a similar way. Where have you been? Where are you going next? How long do you have to travel? And when they hear that I’m 30, the question that often comes up is: What did you do before you went backpacking? I was helping a company make the change to Continuous Delivery. This caused a problem for me. How do I describe Continuous Delivery to a backpacker who uses Facebook to connect with fellow travelers and Skype to call home, but has no knowledge of software development? I told them I was a IT consultant, which is so vague it razes even more questions. I could say I was a programmer, which was true a couple of years ago, but not really what I have been doing the last year I was working. This is how I tried to explain it: Look at Google and Facebook, you expect there website to be available. When you want to post your instagram picture you expect it to work. But even Google and Facebook need to update their website. They do it in a way so that the user doesn’t notice (he/she only sees the change) and that is what users are starting to expect from websites of applications. Now at least in the Netherlands, a lot of companies understand this, but do not know how to change there process to make this possible. Introducing Continuous Delivery (supported by DevOps) in a company is a way to achieve this Google or Facebook like updating for every company. Those who know Continuous Delivery will say that this is a extreme oversimplification of what is Continuous Delivery is. This is true, but how do I explain software quality improvements, a quick feedback loop for customers and fewer deployment issues and risks to fellow travelers? And do the customers from the company really notice these changes? Hopefully it wasn’t so bad before that this would be the case. So although this is great for developers, operations and the IT manager, does the business really care? As long as the website doesn’t go down regularly and the developers can keep up with the requested changes, the business doesn’t really care. This is my first blogpost about Continuous Delivery. My goal is to go deeper into different aspects of Continuous Delivery and DevOps, because I believe they are an integral part of the future of software development.","raw":null,"content":null,"categories":[{"name":"DevOps","slug":"DevOps","permalink":"http://eriksteinebach.nl/categories/DevOps/"}],"tags":[{"name":"Continuous Delivery","slug":"Continuous-Delivery","permalink":"http://eriksteinebach.nl/tags/Continuous-Delivery/"},{"name":"DevOps","slug":"DevOps","permalink":"http://eriksteinebach.nl/tags/DevOps/"},{"name":"Backpacking","slug":"Backpacking","permalink":"http://eriksteinebach.nl/tags/Backpacking/"}]}]}